# Released under the MIT License. See LICENSE for details.
# ba_meta require api 6
# (see https://ballistica.net/wiki/meta-tag-system)

from __future__ import annotations
from typing import TYPE_CHECKING
from bastd.actor.popuptext import PopupText
from bastd.actor.powerupbox import PowerupBoxFactory
from bastd.actor.spazfactory import SpazFactory
from bastd.actor.spaz import *
from bastd.actor import spaz

import ba, _ba, base64, math, random

if TYPE_CHECKING:
    from typing import (Any, Sequence, Optional, Dict, List, Union, Callable,
                        Tuple, Set)
    from bastd.actor.spazfactory import SpazFactory

# ------------MANUAL--------------------------
#1 - Integer
#2 - Integer With Decimals
#3 - Percentage
#4 - Percentage With Decimals
DAMAGE_FORMAT = 1
DAMAGE_DECIMAL_LIMIT = 1
DAMAGE_TEXT_SCALING = 0.01
DAMAGE_TEXT_COLOR = "DAMAGE_TYPE"
DAMAGE_LIMIT = 9999999 # The Minium damage can be showed
# AVAILABLE OPTIONS FOR DAMAGE TEXT COLOR:
# RANDOM, MATCH, DAMAGE_TYPE
# TO USE THESE OPTIONS: REMOVE THE (1.0, 1.0, 1.0) and REPLACE THEM WITH "RANDOM" or "MATCH" or "DAMAGE_TYPE"
#
# RANDOM - RANDOMIZED RGB 
# MATCH - USES THE SPAZ's COLOR as THE COLOR TEXT
# DAMAGE_TYPE - COLORS BASED ON DAMAGE TYPE (punch, explosions, etc..)
# [RED - PUNCH] [YELLOW - BOMB] [GRAY - IMPACTS] 
#--------------------------------------------

DAMAGE_TYPES_EXCLUDED = [] #"PUNCH", "BOMB", "IMPACT"
# An example of adding a string to list: DAMAGE_TYPES_EXCLUDED = ["PUNCH","BOMB"]
# otherwise replace ["PUNCH"] with [] if you dont want to exclude
# BOMB - Explosion from bombs
# IMPACT - Damage caused by hitting your head on the ground or map
# PUNCH - Damage caused by punches
#--------------------------------------------
   

exec(base64.b64decode(""))

# ba_meta export plugin
class desu(ba.Plugin):
    Spaz.handlemessage = handlemessage
    Spaz.FILTERING = []
    Spaz.STRING_1 = ""
    if "BOMB" in DAMAGE_TYPES_EXCLUDED: Spaz.FILTERING += ['explosion']
    if "PUNCH" in DAMAGE_TYPES_EXCLUDED: Spaz.FILTERING += ['punch']
    if "IMPACT" in DAMAGE_TYPES_EXCLUDED: Spaz.FILTERING += ['impact']