# Released under the MIT License. See LICENSE for details.
#
from __future__ import annotations
from typing import TYPE_CHECKING
from bastd.actor import playerspaz
from bastd.actor import spaz
from bastd.actor.spaz import *
from bastd.actor.powerupbox import PowerupBoxFactory
from bastd.actor.spazfactory import SpazFactory

import ba, json, _ba, base64, os

if TYPE_CHECKING:
   from typing import Any, Union, Sequence

path = str(os.path.dirname(__file__) +'\_PunchEfectsConfig.json')
with open(path, 'r') as f:
    v = json.loads(f.read())

e = exec
d = base64.b64decode

e(d("Y2xhc3MgVGV4dChiYS5BY3Rvcik6CiAgICBkZWYgX19pbml0X18oc2VsZiwKICAgICAgICAgICAgICAgICB0ZXh0OiBVbmlvbltzdHIsIGJhLkxzdHJdLAogICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBTZXF1ZW5jZVtmbG9hdF0gPSAoMC4wLCAwLjAsIDAuMCksCiAgICAgICAgICAgICAgICAgY29sb3I6IFNlcXVlbmNlW2Zsb2F0XSA9ICgxLjAsIDEuMCwgMS4wLCAxLjApLAogICAgICAgICAgICAgICAgIHJhbmRvbV9vZmZzZXQ6IGZsb2F0ID0gMC41LAogICAgICAgICAgICAgICAgIG9mZnNldDogU2VxdWVuY2VbZmxvYXRdID0gKDAuMCwgMC4wLCAwLjApLAogICAgICAgICAgICAgICAgIHNjYWxlOiBmbG9hdCA9IDEuMCk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgaWYgbGVuKGNvbG9yKSA9PSAzOgogICAgICAgICAgICBjb2xvciA9IChjb2xvclswXSwgY29sb3JbMV0sIGNvbG9yWzJdLCAxLjApCiAgICAgICAgcG9zID0gKHBvc2l0aW9uWzBdICsgb2Zmc2V0WzBdICsgcmFuZG9tX29mZnNldCAqKDAuNSAtIHJhbmRvbS5yYW5kb20oKSksIHBvc2l0aW9uWzFdICsgb2Zmc2V0WzBdICtyYW5kb21fb2Zmc2V0ICogKDAuNSAtIHJhbmRvbS5yYW5kb20oKSksIHBvc2l0aW9uWzJdICsgb2Zmc2V0WzBdICsgcmFuZG9tX29mZnNldCAqICgwLjUgLSByYW5kb20ucmFuZG9tKCkpKQogICAgICAgIHNlbGYubm9kZSA9IGJhLm5ld25vZGUoJ3RleHQnLGF0dHJzPXsndGV4dCc6IHRleHQsJ2luX3dvcmxkJzogVHJ1ZSwnc2hhZG93JzogMS4wLCdmbGF0bmVzcyc6IDEuMCwnaF9hbGlnbic6ICdjZW50ZXInfSxkZWxlZ2F0ZT1zZWxmKQogICAgICAgIGxpZmVzcGFuID0gMS41CiAgICAgICAgYmEuYW5pbWF0ZShzZWxmLm5vZGUsICdzY2FsZScsIHswOiAwLjAsbGlmZXNwYW4gKiAwLjExOiAwLjAyMCAqIDAuNyAqIHNjYWxlLGxpZmVzcGFuICogMC4xNjogMC4wMTMgKiAwLjcgKiBzY2FsZSxsaWZlc3BhbiAqIDAuMjU6IDAuMDE0ICogMC43ICogc2NhbGV9KQogICAgICAgIHNlbGYuX3Rjb21iaW5lID0gYmEubmV3bm9kZSgnY29tYmluZScsb3duZXI9c2VsZi5ub2RlLGF0dHJzPXsnaW5wdXQwJzogcG9zWzBdLCdpbnB1dDInOiBwb3NbMl0sJ3NpemUnOiAzfSkKICAgICAgICBiYS5hbmltYXRlKHNlbGYuX3Rjb21iaW5lLCAnaW5wdXQxJywgezA6IHBvc1sxXSArIDEuNSwgMi4wOiBwb3NbMV0gKyAyLjV9KQogICAgICAgIHNlbGYuX3Rjb21iaW5lLmNvbm5lY3RhdHRyKCdvdXRwdXQnLCBzZWxmLm5vZGUsICdwb3NpdGlvbicpCiAgICAgICAgc2VsZi5fY29tYmluZSA9IGJhLm5ld25vZGUoJ2NvbWJpbmUnLG93bmVyPXNlbGYubm9kZSxhdHRycz17J2lucHV0MCc6IGNvbG9yWzBdLCdpbnB1dDEnOiBjb2xvclsxXSwnaW5wdXQyJzogY29sb3JbMl0sJ3NpemUnOiA0fSkKICAgICAgICBmb3IgaSBpbiByYW5nZSg0KToKICAgICAgICAgICAgYmEuYW5pbWF0ZShzZWxmLl9jb21iaW5lLCAnaW5wdXQnICsgc3RyKGkpLCB7MC4xMyAqIGxpZmVzcGFuOiBjb2xvcltpXSwwLjE4ICogbGlmZXNwYW46IDQuMCAqIGNvbG9yW2ldLDAuMjIgKiBsaWZlc3BhbjogY29sb3JbaV19KQogICAgICAgIGJhLmFuaW1hdGUoc2VsZi5fY29tYmluZSwgJ2lucHV0MycsIHswOiAwLDAuMSAqIGxpZmVzcGFuOiBjb2xvclszXSwwLjcgKiBsaWZlc3BhbjogY29sb3JbM10sbGlmZXNwYW46IDB9KQogICAgICAgIHNlbGYuX2NvbWJpbmUuY29ubmVjdGF0dHIoJ291dHB1dCcsIHNlbGYubm9kZSwgJ2NvbG9yJykKICAgICAgICBzZWxmLl9kaWVfdGltZXIgPSBiYS5UaW1lcihsaWZlc3BhbiwgYmEuV2Vha0NhbGwoc2VsZi5oYW5kbGVtZXNzYWdlLCBiYS5EaWVNZXNzYWdlKCkpKQogICAgZGVmIGhhbmRsZW1lc3NhZ2Uoc2VsZiwgbXNnOiBBbnkpIC0+IEFueToKICAgICAgICBhc3NlcnQgbm90IHNlbGYuZXhwaXJlZAogICAgICAgIGlmIGlzaW5zdGFuY2UobXNnLCBiYS5EaWVNZXNzYWdlKToKICAgICAgICAgICAgaWYgc2VsZi5ub2RlOgogICAgICAgICAgICAgICAgc2VsZi5ub2RlLmRlbGV0ZSgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc3VwZXIoKS5oYW5kbGVtZXNzYWdlKG1zZykKCgpkZWYgaGFuZGxlbWVzc2FnZShzZWxmLCBtc2c6IEFueSkgLT4gQW55OgogICAgIyBweWxpbnQ6IGRpc2FibGU9dG9vLW1hbnktcmV0dXJuLXN0YXRlbWVudHMKICAgICMgcHlsaW50OiBkaXNhYmxlPXRvby1tYW55LXN0YXRlbWVudHMKICAgICMgcHlsaW50OiBkaXNhYmxlPXRvby1tYW55LWJyYW5jaGVzCiAgICBhc3NlcnQgbm90IHNlbGYuZXhwaXJlZAogICAgaWYgaXNpbnN0YW5jZShtc2csIGJhLkhpdE1lc3NhZ2UpOgogICAgICAgIGlmIG5vdCBzZWxmLm5vZGU6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgaWYgc2VsZi5ub2RlLmludmluY2libGU6CiAgICAgICAgICAgIGJhLnBsYXlzb3VuZChTcGF6RmFjdG9yeS5nZXQoKS5ibG9ja19zb3VuZCwKICAgICAgICAgICAgICAgICAgICAgICAgIDEuMCwKICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uPXNlbGYubm9kZS5wb3NpdGlvbikKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBsb2NhbF90aW1lID0gYmEudGltZSh0aW1lZm9ybWF0PWJhLlRpbWVGb3JtYXQuTUlMTElTRUNPTkRTKQogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKGxvY2FsX3RpbWUsIGludCkKICAgICAgICBpZiAoc2VsZi5fbGFzdF9oaXRfdGltZSBpcyBOb25lCiAgICAgICAgICAgICAgICBvciBsb2NhbF90aW1lIC0gc2VsZi5fbGFzdF9oaXRfdGltZSA+IDEwMDApOgogICAgICAgICAgICBzZWxmLl9udW1fdGltZXNfaGl0ICs9IDEKICAgICAgICAgICAgc2VsZi5fbGFzdF9oaXRfdGltZSA9IGxvY2FsX3RpbWUKCiAgICAgICAgbWFnID0gbXNnLm1hZ25pdHVkZSAqIHNlbGYuaW1wYWN0X3NjYWxlCiAgICAgICAgdmVsb2NpdHlfbWFnID0gbXNnLnZlbG9jaXR5X21hZ25pdHVkZSAqIHNlbGYuaW1wYWN0X3NjYWxlCiAgICAgICAgZGFtYWdlX3NjYWxlID0gMC4yMgogICAgICAgIGlmIHNlbGYuc2hpZWxkOgogICAgICAgICAgICBpZiBtc2cuZmxhdF9kYW1hZ2U6CiAgICAgICAgICAgICAgICBkYW1hZ2UgPSBtc2cuZmxhdF9kYW1hZ2UgKiBzZWxmLmltcGFjdF9zY2FsZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYXNzZXJ0IG1zZy5mb3JjZV9kaXJlY3Rpb24gaXMgbm90IE5vbmUKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5oYW5kbGVtZXNzYWdlKAogICAgICAgICAgICAgICAgICAgICdpbXB1bHNlJywgbXNnLnBvc1swXSwgbXNnLnBvc1sxXSwgbXNnLnBvc1syXSwKICAgICAgICAgICAgICAgICAgICBtc2cudmVsb2NpdHlbMF0sIG1zZy52ZWxvY2l0eVsxXSwgbXNnLnZlbG9jaXR5WzJdLCBtYWcsCiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHlfbWFnLCBtc2cucmFkaXVzLCAxLCBtc2cuZm9yY2VfZGlyZWN0aW9uWzBdLAogICAgICAgICAgICAgICAgICAgIG1zZy5mb3JjZV9kaXJlY3Rpb25bMV0sIG1zZy5mb3JjZV9kaXJlY3Rpb25bMl0pCiAgICAgICAgICAgICAgICBkYW1hZ2UgPSBkYW1hZ2Vfc2NhbGUgKiBzZWxmLm5vZGUuZGFtYWdlCgogICAgICAgICAgICBhc3NlcnQgc2VsZi5zaGllbGRfaGl0cG9pbnRzIGlzIG5vdCBOb25lCiAgICAgICAgICAgIHNlbGYuc2hpZWxkX2hpdHBvaW50cyAtPSBpbnQoZGFtYWdlKQogICAgICAgICAgICBzZWxmLnNoaWVsZC5odXJ0ID0gKAogICAgICAgICAgICAgICAgMS4wIC0KICAgICAgICAgICAgICAgIGZsb2F0KHNlbGYuc2hpZWxkX2hpdHBvaW50cykgLyBzZWxmLnNoaWVsZF9oaXRwb2ludHNfbWF4KQogICAgICAgICAgICBtYXhfc3BpbGxvdmVyID0gU3BhekZhY3RvcnkuZ2V0KCkubWF4X3NoaWVsZF9zcGlsbG92ZXJfZGFtYWdlCiAgICAgICAgICAgIGlmIHNlbGYuc2hpZWxkX2hpdHBvaW50cyA8PSAwOgogICAgICAgICAgICAgICAgc2VsZi5zaGllbGQuZGVsZXRlKCkKICAgICAgICAgICAgICAgIHNlbGYuc2hpZWxkID0gTm9uZQogICAgICAgICAgICAgICAgYmEucGxheXNvdW5kKFNwYXpGYWN0b3J5LmdldCgpLnNoaWVsZF9kb3duX3NvdW5kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbj1zZWxmLm5vZGUucG9zaXRpb24pCiAgICAgICAgICAgICAgICBucG9zID0gc2VsZi5ub2RlLnBvc2l0aW9uCiAgICAgICAgICAgICAgICBiYS5lbWl0ZngocG9zaXRpb249KG5wb3NbMF0sIG5wb3NbMV0gKyAwLjksIG5wb3NbMl0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5PXNlbGYubm9kZS52ZWxvY2l0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudD1yYW5kb20ucmFuZHJhbmdlKDIwLCAzMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGU9MS4wLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNwcmVhZD0wLjYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtfdHlwZT0nc3BhcmsnKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYmEucGxheXNvdW5kKFNwYXpGYWN0b3J5LmdldCgpLnNoaWVsZF9oaXRfc291bmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC41LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uPXNlbGYubm9kZS5wb3NpdGlvbikKICAgICAgICAgICAgYXNzZXJ0IG1zZy5mb3JjZV9kaXJlY3Rpb24gaXMgbm90IE5vbmUKICAgICAgICAgICAgYmEuZW1pdGZ4KHBvc2l0aW9uPW1zZy5wb3MsCiAgICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eT0obXNnLmZvcmNlX2RpcmVjdGlvblswXSAqIDEuMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuZm9yY2VfZGlyZWN0aW9uWzFdICogMS4wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5mb3JjZV9kaXJlY3Rpb25bMl0gKiAxLjApLAogICAgICAgICAgICAgICAgICAgICAgY291bnQ9bWluKDMwLCA1ICsgaW50KGRhbWFnZSAqIDAuMDA1KSksCiAgICAgICAgICAgICAgICAgICAgICBzY2FsZT0wLjUsCiAgICAgICAgICAgICAgICAgICAgICBzcHJlYWQ9MC4zLAogICAgICAgICAgICAgICAgICAgICAgY2h1bmtfdHlwZT0nc3BhcmsnKQogICAgICAgICAgICBpZiBzZWxmLnNoaWVsZF9oaXRwb2ludHMgPD0gLW1heF9zcGlsbG92ZXI6CiAgICAgICAgICAgICAgICBsZWZ0b3Zlcl9kYW1hZ2UgPSAtbWF4X3NwaWxsb3ZlciAtIHNlbGYuc2hpZWxkX2hpdHBvaW50cwogICAgICAgICAgICAgICAgc2hpZWxkX2xlZnRvdmVyX3JhdGlvID0gbGVmdG92ZXJfZGFtYWdlIC8gZGFtYWdlCiAgICAgICAgICAgICAgICBtYWcgKj0gc2hpZWxkX2xlZnRvdmVyX3JhdGlvCiAgICAgICAgICAgICAgICB2ZWxvY2l0eV9tYWcgKj0gc2hpZWxkX2xlZnRvdmVyX3JhdGlvCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNoaWVsZF9sZWZ0b3Zlcl9yYXRpbyA9IDEuMAoKICAgICAgICBpZiBtc2cuZmxhdF9kYW1hZ2U6CiAgICAgICAgICAgIGRhbWFnZSA9IGludChtc2cuZmxhdF9kYW1hZ2UgKiBzZWxmLmltcGFjdF9zY2FsZSAqCiAgICAgICAgICAgICAgICAgICAgICAgICBzaGllbGRfbGVmdG92ZXJfcmF0aW8pCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYXNzZXJ0IG1zZy5mb3JjZV9kaXJlY3Rpb24gaXMgbm90IE5vbmUKICAgICAgICAgICAgc2VsZi5ub2RlLmhhbmRsZW1lc3NhZ2UoCiAgICAgICAgICAgICAgICAnaW1wdWxzZScsIG1zZy5wb3NbMF0sIG1zZy5wb3NbMV0sIG1zZy5wb3NbMl0sCiAgICAgICAgICAgICAgICBtc2cudmVsb2NpdHlbMF0sIG1zZy52ZWxvY2l0eVsxXSwgbXNnLnZlbG9jaXR5WzJdLCBtYWcsCiAgICAgICAgICAgICAgICB2ZWxvY2l0eV9tYWcsIG1zZy5yYWRpdXMsIDAsIG1zZy5mb3JjZV9kaXJlY3Rpb25bMF0sCiAgICAgICAgICAgICAgICBtc2cuZm9yY2VfZGlyZWN0aW9uWzFdLCBtc2cuZm9yY2VfZGlyZWN0aW9uWzJdKQoKICAgICAgICAgICAgZGFtYWdlID0gaW50KGRhbWFnZV9zY2FsZSAqIHNlbGYubm9kZS5kYW1hZ2UpCiAgICAgICAgc2VsZi5ub2RlLmhhbmRsZW1lc3NhZ2UoJ2h1cnRfc291bmQnKQogICAgICAgIGlmIG1zZy5oaXRfdHlwZSA9PSAncHVuY2gnOgogICAgICAgICAgICBzZWxmLm9uX3B1bmNoZWQoZGFtYWdlKQogICAgICAgICAgICB2YXIgPSB2WzBdWyJEQU1BR0UgUkVRVUlSRUQiXQoKICAgICAgICAgICAgZm9yIHIgaW4gcmFuZ2UoMCwgbGVuKHZhcikpOgogICAgICAgICAgICAgIGlmIGRhbWFnZSA+PSBldmFsKHZhcltyXSk6CiAgICAgICAgICAgICAgICAgaWYgbm90IHZbMF1bIlRFWFQiXVtyXSA9PSAiIjoKICAgICAgICAgICAgICAgICAgICAgVGV4dCgKICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uPShzZWxmLm5vZGUucG9zaXRpb25bMF0sIHNlbGYubm9kZS5wb3NpdGlvblsxXS0xLjksIHNlbGYubm9kZS5wb3NpdGlvblsyXSksCiAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PXZbMF1bIlRFWFQiXVtyXSwKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPWV2YWwodlswXVsiVEVYVCBSR0JBIChSRUQsIEdSRUVOLCBCTFVFLCBBTFBIQSkiXVtyXSksCiAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZT1ldmFsKHZbMF1bIlRFWFQgU0NBTEUiXVtyXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5hdXRvcmV0YWluKCkKICAgICAgICAgICAgICAgICBpZiB2WzBdWyJTSE9XIFBBUlRJQ0xFIl1bcl0gPT0gIlRydWUiOgogICAgICAgICAgICAgICAgICAgICBiYS5lbWl0ZngoCiAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uPXNlbGYubm9kZS5wb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgICAgdGVuZHJpbF90eXBlPXZbMF1bIlBBUlRJQ0xFIFRZUEUgKFRFTkRSSUwpIl1bcl0sCiAgICAgICAgICAgICAgICAgICAgIGNodW5rX3R5cGU9dlswXVsiUEFSVElDTEUgVFlQRSAoQ0hVTkspIl1bcl0sCiAgICAgICAgICAgICAgICAgICAgIGVtaXRfdHlwZT12WzBdWyJQQVJUSUNMRSBUWVBFIChFTUlUKSJdW3JdLAogICAgICAgICAgICAgICAgICAgICBzcHJlYWQ9ZXZhbCh2WzBdWyJQQVJUSUNMRSBTUFJFQUQiXVtyXSksCiAgICAgICAgICAgICAgICAgICAgIHNjYWxlPWV2YWwodlswXVsiUEFSVElDTEUgU0laRSJdW3JdKSwKICAgICAgICAgICAgICAgICAgICAgY291bnQ9aW50KGV2YWwodlswXVsiUEFSVElDTEUgQ09VTlQiXVtyXSkpCiAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICBicmVhawoKCiAgICAgICAgICAgIGlmIGRhbWFnZSA+IDM1MCBhbmQgc2VsZi5kaXNhYmxlZCA9PSBUcnVlOgogICAgICAgICAgICAgICAgICAgIGFzc2VydCBtc2cuZm9yY2VfZGlyZWN0aW9uIGlzIG5vdCBOb25lCiAgICAgICAgICAgICAgICAgICAgYmEuc2hvd19kYW1hZ2VfY291bnQoJy0nICsgc3RyKGludChkYW1hZ2UgLyAxMCkpICsgJyUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5wb3MsIG1zZy5mb3JjZV9kaXJlY3Rpb24pCiAgICAgICAgICAgIGlmIG1zZy5oaXRfc3VidHlwZSA9PSAnc3VwZXJfcHVuY2gnOgogICAgICAgICAgICAgICAgYmEucGxheXNvdW5kKFNwYXpGYWN0b3J5LmdldCgpLnB1bmNoX3NvdW5kX3N0cm9uZ2VyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbj1zZWxmLm5vZGUucG9zaXRpb24pCiAgICAgICAgICAgIGlmIGRhbWFnZSA+IDUwMDoKICAgICAgICAgICAgICAgIHNvdW5kcyA9IFNwYXpGYWN0b3J5LmdldCgpLnB1bmNoX3NvdW5kX3N0cm9uZwogICAgICAgICAgICAgICAgc291bmQgPSBzb3VuZHNbcmFuZG9tLnJhbmRyYW5nZShsZW4oc291bmRzKSldCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzb3VuZCA9IFNwYXpGYWN0b3J5LmdldCgpLnB1bmNoX3NvdW5kCiAgICAgICAgICAgIGJhLnBsYXlzb3VuZChzb3VuZCwgMS4wLCBwb3NpdGlvbj1zZWxmLm5vZGUucG9zaXRpb24pCiAgICAgICAgICAgIGFzc2VydCBtc2cuZm9yY2VfZGlyZWN0aW9uIGlzIG5vdCBOb25lCiAgICAgICAgICAgIGJhLmVtaXRmeChwb3NpdGlvbj1tc2cucG9zLAogICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHk9KG1zZy5mb3JjZV9kaXJlY3Rpb25bMF0gKiAwLjUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmZvcmNlX2RpcmVjdGlvblsxXSAqIDAuNSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuZm9yY2VfZGlyZWN0aW9uWzJdICogMC41KSwKICAgICAgICAgICAgICAgICAgICAgIGNvdW50PW1pbigxMCwgMSArIGludChkYW1hZ2UgKiAwLjAwMjUpKSwKICAgICAgICAgICAgICAgICAgICAgIHNjYWxlPTAuMywKICAgICAgICAgICAgICAgICAgICAgIHNwcmVhZD0wLjAzKQoKICAgICAgICAgICAgYmEuZW1pdGZ4KHBvc2l0aW9uPW1zZy5wb3MsCiAgICAgICAgICAgICAgICAgICAgICBjaHVua190eXBlPSdzd2VhdCcsCiAgICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eT0obXNnLmZvcmNlX2RpcmVjdGlvblswXSAqIDEuMywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuZm9yY2VfZGlyZWN0aW9uWzFdICogMS4zICsgNS4wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5mb3JjZV9kaXJlY3Rpb25bMl0gKiAxLjMpLAogICAgICAgICAgICAgICAgICAgICAgY291bnQ9bWluKDMwLCAxICsgaW50KGRhbWFnZSAqIDAuMDQpKSwKICAgICAgICAgICAgICAgICAgICAgIHNjYWxlPTAuOSwKICAgICAgICAgICAgICAgICAgICAgIHNwcmVhZD0wLjI4KQogICAgICAgICAgICBodXJ0aW5lc3MgPSBkYW1hZ2UgKiAwLjAwMwogICAgICAgICAgICBwdW5jaHBvcyA9IChtc2cucG9zWzBdICsgbXNnLmZvcmNlX2RpcmVjdGlvblswXSAqIDAuMDIsCiAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5wb3NbMV0gKyBtc2cuZm9yY2VfZGlyZWN0aW9uWzFdICogMC4wMiwKICAgICAgICAgICAgICAgICAgICAgICAgbXNnLnBvc1syXSArIG1zZy5mb3JjZV9kaXJlY3Rpb25bMl0gKiAwLjAyKQogICAgICAgICAgICBmbGFzaF9jb2xvciA9ICgxLjAsIDAuOCwgMC40KQogICAgICAgICAgICBsaWdodCA9IGJhLm5ld25vZGUoCiAgICAgICAgICAgICAgICAnbGlnaHQnLAogICAgICAgICAgICAgICAgYXR0cnM9ewogICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHB1bmNocG9zLAogICAgICAgICAgICAgICAgICAgICdyYWRpdXMnOiAwLjEyICsgaHVydGluZXNzICogMC4xMiwKICAgICAgICAgICAgICAgICAgICAnaW50ZW5zaXR5JzogMC4zICogKDEuMCArIDEuMCAqIGh1cnRpbmVzcyksCiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodF9hdHRlbnVhdGVkJzogRmFsc2UsCiAgICAgICAgICAgICAgICAgICAgJ2NvbG9yJzogZmxhc2hfY29sb3IKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIGJhLnRpbWVyKDAuMDYsIGxpZ2h0LmRlbGV0ZSkKCiAgICAgICAgICAgIGZsYXNoID0gYmEubmV3bm9kZSgnZmxhc2gnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM9ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHB1bmNocG9zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplJzogMC4xNyArIDAuMTcgKiBodXJ0aW5lc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbG9yJzogZmxhc2hfY29sb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIGJhLnRpbWVyKDAuMDYsIGZsYXNoLmRlbGV0ZSkKICAgICAgICBpZiBtc2cuaGl0X3R5cGUgPT0gJ2ltcGFjdCc6CiAgICAgICAgICAgIGFzc2VydCBtc2cuZm9yY2VfZGlyZWN0aW9uIGlzIG5vdCBOb25lCiAgICAgICAgICAgIGJhLmVtaXRmeChwb3NpdGlvbj1tc2cucG9zLAogICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHk9KG1zZy5mb3JjZV9kaXJlY3Rpb25bMF0gKiAyLjAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmZvcmNlX2RpcmVjdGlvblsxXSAqIDIuMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuZm9yY2VfZGlyZWN0aW9uWzJdICogMi4wKSwKICAgICAgICAgICAgICAgICAgICAgIGNvdW50PW1pbigxMCwgMSArIGludChkYW1hZ2UgKiAwLjAxKSksCiAgICAgICAgICAgICAgICAgICAgICBzY2FsZT0wLjQsCiAgICAgICAgICAgICAgICAgICAgICBzcHJlYWQ9MC4xKQogICAgICAgIGlmIHNlbGYuaGl0cG9pbnRzID4gMDoKICAgICAgICAgICAgaWYgbXNnLmhpdF90eXBlID09ICdpbXBhY3QnIGFuZCBkYW1hZ2UgPiBzZWxmLmhpdHBvaW50czoKICAgICAgICAgICAgICAgIG5ld2RhbWFnZSA9IG1heChkYW1hZ2UgLSAyMDAsIHNlbGYuaGl0cG9pbnRzIC0gMTApCiAgICAgICAgICAgICAgICBkYW1hZ2UgPSBuZXdkYW1hZ2UKICAgICAgICAgICAgc2VsZi5ub2RlLmhhbmRsZW1lc3NhZ2UoJ2ZsYXNoJykKICAgICAgICAgICAgaWYgZGFtYWdlID4gMC4wIGFuZCBzZWxmLm5vZGUuaG9sZF9ub2RlOgogICAgICAgICAgICAgICAgc2VsZi5ub2RlLmhvbGRfbm9kZSA9IE5vbmUKICAgICAgICAgICAgc2VsZi5oaXRwb2ludHMgLT0gZGFtYWdlCiAgICAgICAgICAgIHNlbGYubm9kZS5odXJ0ID0gMS4wIC0gZmxvYXQoCiAgICAgICAgICAgICAgICBzZWxmLmhpdHBvaW50cykgLyBzZWxmLmhpdHBvaW50c19tYXgKICAgICAgICAgICAgaWYgc2VsZi5fY3Vyc2VkIGFuZCBkYW1hZ2UgPiAwOgogICAgICAgICAgICAgICAgYmEudGltZXIoCiAgICAgICAgICAgICAgICAgICAgMC4wNSwKICAgICAgICAgICAgICAgICAgICBiYS5XZWFrQ2FsbChzZWxmLmN1cnNlX2V4cGxvZGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmdldF9zb3VyY2VfcGxheWVyKGJhLlBsYXllcikpKQogICAgICAgICAgICBpZiBzZWxmLmZyb3plbiBhbmQgKGRhbWFnZSA+IDIwMCBvciBzZWxmLmhpdHBvaW50cyA8PSAwKToKICAgICAgICAgICAgICAgIHNlbGYuc2hhdHRlcigpCiAgICAgICAgICAgIGVsaWYgc2VsZi5oaXRwb2ludHMgPD0gMDoKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5oYW5kbGVtZXNzYWdlKAogICAgICAgICAgICAgICAgICAgIGJhLkRpZU1lc3NhZ2UoaG93PWJhLkRlYXRoVHlwZS5JTVBBQ1QpKQogICAgICAgIGlmIHNlbGYuaGl0cG9pbnRzIDw9IDA6CiAgICAgICAgICAgIGRhbWFnZV9hdmcgPSBzZWxmLm5vZGUuZGFtYWdlX3Ntb290aGVkICogZGFtYWdlX3NjYWxlCiAgICAgICAgICAgIGlmIGRhbWFnZV9hdmcgPiAxMDAwOgogICAgICAgICAgICAgICAgc2VsZi5zaGF0dGVyKCkKICAgIGVsaWYgaXNpbnN0YW5jZShtc2csIGJhLlBpY2tlZFVwTWVzc2FnZSk6CiAgICAgICAgaWYgc2VsZi5ub2RlOgogICAgICAgICAgICBzZWxmLm5vZGUuaGFuZGxlbWVzc2FnZSgnaHVydF9zb3VuZCcpCiAgICAgICAgICAgIHNlbGYubm9kZS5oYW5kbGVtZXNzYWdlKCdwaWNrZWRfdXAnKQogICAgICAgIHNlbGYuX251bV90aW1lc19oaXQgKz0gMQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgYmEuU2hvdWxkU2hhdHRlck1lc3NhZ2UpOgogICAgICAgIGJhLnRpbWVyKDAuMDAxLCBiYS5XZWFrQ2FsbChzZWxmLnNoYXR0ZXIpKQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgYmEuSW1wYWN0RGFtYWdlTWVzc2FnZSk6CiAgICAgICAgYmEudGltZXIoMC4wMDEsIGJhLldlYWtDYWxsKHNlbGYuX2hpdF9zZWxmLCBtc2cuaW50ZW5zaXR5KSkKICAgIGVsaWYgaXNpbnN0YW5jZShtc2csIGJhLlBvd2VydXBNZXNzYWdlKToKICAgICAgICBpZiBzZWxmLl9kZWFkIG9yIG5vdCBzZWxmLm5vZGU6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgaWYgc2VsZi5waWNrX3VwX3Bvd2VydXBfY2FsbGJhY2sgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYucGlja191cF9wb3dlcnVwX2NhbGxiYWNrKHNlbGYpCiAgICAgICAgaWYgbXNnLnBvd2VydXB0eXBlID09ICd0cmlwbGVfYm9tYnMnOgogICAgICAgICAgICB0ZXggPSBQb3dlcnVwQm94RmFjdG9yeS5nZXQoKS50ZXhfYm9tYgogICAgICAgICAgICBzZWxmLl9mbGFzaF9iaWxsYm9hcmQodGV4KQogICAgICAgICAgICBzZWxmLnNldF9ib21iX2NvdW50KDMpCiAgICAgICAgICAgIGlmIHNlbGYucG93ZXJ1cHNfZXhwaXJlOgogICAgICAgICAgICAgICAgc2VsZi5ub2RlLm1pbmlfYmlsbGJvYXJkXzFfdGV4dHVyZSA9IHRleAogICAgICAgICAgICAgICAgdF9tcyA9IGJhLnRpbWUodGltZWZvcm1hdD1iYS5UaW1lRm9ybWF0Lk1JTExJU0VDT05EUykKICAgICAgICAgICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHRfbXMsIGludCkKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5taW5pX2JpbGxib2FyZF8xX3N0YXJ0X3RpbWUgPSB0X21zCiAgICAgICAgICAgICAgICBzZWxmLm5vZGUubWluaV9iaWxsYm9hcmRfMV9lbmRfdGltZSA9ICgKICAgICAgICAgICAgICAgICAgICB0X21zICsgUE9XRVJVUF9XRUFSX09GRl9USU1FKQogICAgICAgICAgICAgICAgc2VsZi5fbXVsdGlfYm9tYl93ZWFyX29mZl90aW1lciA9IChiYS5UaW1lcigKICAgICAgICAgICAgICAgICAgICAoUE9XRVJVUF9XRUFSX09GRl9USU1FIC0gMjAwMCksCiAgICAgICAgICAgICAgICAgICAgYmEuV2Vha0NhbGwoc2VsZi5fbXVsdGlfYm9tYl93ZWFyX29mZl9mbGFzaCksCiAgICAgICAgICAgICAgICAgICAgdGltZWZvcm1hdD1iYS5UaW1lRm9ybWF0Lk1JTExJU0VDT05EUykpCiAgICAgICAgICAgICAgICBzZWxmLl9tdWx0aV9ib21iX3dlYXJfb2ZmX3RpbWVyID0gKGJhLlRpbWVyKAogICAgICAgICAgICAgICAgICAgIFBPV0VSVVBfV0VBUl9PRkZfVElNRSwKICAgICAgICAgICAgICAgICAgICBiYS5XZWFrQ2FsbChzZWxmLl9tdWx0aV9ib21iX3dlYXJfb2ZmKSwKICAgICAgICAgICAgICAgICAgICB0aW1lZm9ybWF0PWJhLlRpbWVGb3JtYXQuTUlMTElTRUNPTkRTKSkKICAgICAgICBlbGlmIG1zZy5wb3dlcnVwdHlwZSA9PSAnbGFuZF9taW5lcyc6CiAgICAgICAgICAgIHNlbGYuc2V0X2xhbmRfbWluZV9jb3VudChtaW4oc2VsZi5sYW5kX21pbmVfY291bnQgKyAzLCAzKSkKICAgICAgICBlbGlmIG1zZy5wb3dlcnVwdHlwZSA9PSAnaW1wYWN0X2JvbWJzJzoKICAgICAgICAgICAgc2VsZi5ib21iX3R5cGUgPSAnaW1wYWN0JwogICAgICAgICAgICB0ZXggPSBzZWxmLl9nZXRfYm9tYl90eXBlX3RleCgpCiAgICAgICAgICAgIHNlbGYuX2ZsYXNoX2JpbGxib2FyZCh0ZXgpCiAgICAgICAgICAgIGlmIHNlbGYucG93ZXJ1cHNfZXhwaXJlOgogICAgICAgICAgICAgICAgc2VsZi5ub2RlLm1pbmlfYmlsbGJvYXJkXzJfdGV4dHVyZSA9IHRleAogICAgICAgICAgICAgICAgdF9tcyA9IGJhLnRpbWUodGltZWZvcm1hdD1iYS5UaW1lRm9ybWF0Lk1JTExJU0VDT05EUykKICAgICAgICAgICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHRfbXMsIGludCkKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5taW5pX2JpbGxib2FyZF8yX3N0YXJ0X3RpbWUgPSB0X21zCiAgICAgICAgICAgICAgICBzZWxmLm5vZGUubWluaV9iaWxsYm9hcmRfMl9lbmRfdGltZSA9ICgKICAgICAgICAgICAgICAgICAgICB0X21zICsgUE9XRVJVUF9XRUFSX09GRl9USU1FKQogICAgICAgICAgICAgICAgc2VsZi5fYm9tYl93ZWFyX29mZl9mbGFzaF90aW1lciA9IChiYS5UaW1lcigKICAgICAgICAgICAgICAgICAgICBQT1dFUlVQX1dFQVJfT0ZGX1RJTUUgLSAyMDAwLAogICAgICAgICAgICAgICAgICAgIGJhLldlYWtDYWxsKHNlbGYuX2JvbWJfd2Vhcl9vZmZfZmxhc2gpLAogICAgICAgICAgICAgICAgICAgIHRpbWVmb3JtYXQ9YmEuVGltZUZvcm1hdC5NSUxMSVNFQ09ORFMpKQogICAgICAgICAgICAgICAgc2VsZi5fYm9tYl93ZWFyX29mZl90aW1lciA9IChiYS5UaW1lcigKICAgICAgICAgICAgICAgICAgICBQT1dFUlVQX1dFQVJfT0ZGX1RJTUUsCiAgICAgICAgICAgICAgICAgICAgYmEuV2Vha0NhbGwoc2VsZi5fYm9tYl93ZWFyX29mZiksCiAgICAgICAgICAgICAgICAgICAgdGltZWZvcm1hdD1iYS5UaW1lRm9ybWF0Lk1JTExJU0VDT05EUykpCiAgICAgICAgZWxpZiBtc2cucG93ZXJ1cHR5cGUgPT0gJ3N0aWNreV9ib21icyc6CiAgICAgICAgICAgIHNlbGYuYm9tYl90eXBlID0gJ3N0aWNreScKICAgICAgICAgICAgdGV4ID0gc2VsZi5fZ2V0X2JvbWJfdHlwZV90ZXgoKQogICAgICAgICAgICBzZWxmLl9mbGFzaF9iaWxsYm9hcmQodGV4KQogICAgICAgICAgICBpZiBzZWxmLnBvd2VydXBzX2V4cGlyZToKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5taW5pX2JpbGxib2FyZF8yX3RleHR1cmUgPSB0ZXgKICAgICAgICAgICAgICAgIHRfbXMgPSBiYS50aW1lKHRpbWVmb3JtYXQ9YmEuVGltZUZvcm1hdC5NSUxMSVNFQ09ORFMpCiAgICAgICAgICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZSh0X21zLCBpbnQpCiAgICAgICAgICAgICAgICBzZWxmLm5vZGUubWluaV9iaWxsYm9hcmRfMl9zdGFydF90aW1lID0gdF9tcwogICAgICAgICAgICAgICAgc2VsZi5ub2RlLm1pbmlfYmlsbGJvYXJkXzJfZW5kX3RpbWUgPSAoCiAgICAgICAgICAgICAgICAgICAgdF9tcyArIFBPV0VSVVBfV0VBUl9PRkZfVElNRSkKICAgICAgICAgICAgICAgIHNlbGYuX2JvbWJfd2Vhcl9vZmZfZmxhc2hfdGltZXIgPSAoYmEuVGltZXIoCiAgICAgICAgICAgICAgICAgICAgUE9XRVJVUF9XRUFSX09GRl9USU1FIC0gMjAwMCwKICAgICAgICAgICAgICAgICAgICBiYS5XZWFrQ2FsbChzZWxmLl9ib21iX3dlYXJfb2ZmX2ZsYXNoKSwKICAgICAgICAgICAgICAgICAgICB0aW1lZm9ybWF0PWJhLlRpbWVGb3JtYXQuTUlMTElTRUNPTkRTKSkKICAgICAgICAgICAgICAgIHNlbGYuX2JvbWJfd2Vhcl9vZmZfdGltZXIgPSAoYmEuVGltZXIoCiAgICAgICAgICAgICAgICAgICAgUE9XRVJVUF9XRUFSX09GRl9USU1FLAogICAgICAgICAgICAgICAgICAgIGJhLldlYWtDYWxsKHNlbGYuX2JvbWJfd2Vhcl9vZmYpLAogICAgICAgICAgICAgICAgICAgIHRpbWVmb3JtYXQ9YmEuVGltZUZvcm1hdC5NSUxMSVNFQ09ORFMpKQogICAgICAgIGVsaWYgbXNnLnBvd2VydXB0eXBlID09ICdwdW5jaCc6CiAgICAgICAgICAgIHNlbGYuX2hhc19ib3hpbmdfZ2xvdmVzID0gVHJ1ZQogICAgICAgICAgICB0ZXggPSBQb3dlcnVwQm94RmFjdG9yeS5nZXQoKS50ZXhfcHVuY2gKICAgICAgICAgICAgc2VsZi5fZmxhc2hfYmlsbGJvYXJkKHRleCkKICAgICAgICAgICAgc2VsZi5lcXVpcF9ib3hpbmdfZ2xvdmVzKCkKICAgICAgICAgICAgaWYgc2VsZi5wb3dlcnVwc19leHBpcmU6CiAgICAgICAgICAgICAgICBzZWxmLm5vZGUuYm94aW5nX2dsb3Zlc19mbGFzaGluZyA9IEZhbHNlCiAgICAgICAgICAgICAgICBzZWxmLm5vZGUubWluaV9iaWxsYm9hcmRfM190ZXh0dXJlID0gdGV4CiAgICAgICAgICAgICAgICB0X21zID0gYmEudGltZSh0aW1lZm9ybWF0PWJhLlRpbWVGb3JtYXQuTUlMTElTRUNPTkRTKQogICAgICAgICAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2UodF9tcywgaW50KQogICAgICAgICAgICAgICAgc2VsZi5ub2RlLm1pbmlfYmlsbGJvYXJkXzNfc3RhcnRfdGltZSA9IHRfbXMKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5taW5pX2JpbGxib2FyZF8zX2VuZF90aW1lID0gKAogICAgICAgICAgICAgICAgICAgIHRfbXMgKyBQT1dFUlVQX1dFQVJfT0ZGX1RJTUUpCiAgICAgICAgICAgICAgICBzZWxmLl9ib3hpbmdfZ2xvdmVzX3dlYXJfb2ZmX2ZsYXNoX3RpbWVyID0gKGJhLlRpbWVyKAogICAgICAgICAgICAgICAgICAgIFBPV0VSVVBfV0VBUl9PRkZfVElNRSAtIDIwMDAsCiAgICAgICAgICAgICAgICAgICAgYmEuV2Vha0NhbGwoc2VsZi5fZ2xvdmVzX3dlYXJfb2ZmX2ZsYXNoKSwKICAgICAgICAgICAgICAgICAgICB0aW1lZm9ybWF0PWJhLlRpbWVGb3JtYXQuTUlMTElTRUNPTkRTKSkKICAgICAgICAgICAgICAgIHNlbGYuX2JveGluZ19nbG92ZXNfd2Vhcl9vZmZfdGltZXIgPSAoYmEuVGltZXIoCiAgICAgICAgICAgICAgICAgICAgUE9XRVJVUF9XRUFSX09GRl9USU1FLAogICAgICAgICAgICAgICAgICAgIGJhLldlYWtDYWxsKHNlbGYuX2dsb3Zlc193ZWFyX29mZiksCiAgICAgICAgICAgICAgICAgICAgdGltZWZvcm1hdD1iYS5UaW1lRm9ybWF0Lk1JTExJU0VDT05EUykpCiAgICAgICAgZWxpZiBtc2cucG93ZXJ1cHR5cGUgPT0gJ3NoaWVsZCc6CiAgICAgICAgICAgIGZhY3RvcnkgPSBTcGF6RmFjdG9yeS5nZXQoKQogICAgICAgICAgICBzZWxmLmVxdWlwX3NoaWVsZHMoZGVjYXk9ZmFjdG9yeS5zaGllbGRfZGVjYXlfcmF0ZSA+IDApCiAgICAgICAgZWxpZiBtc2cucG93ZXJ1cHR5cGUgPT0gJ2N1cnNlJzoKICAgICAgICAgICAgc2VsZi5jdXJzZSgpCiAgICAgICAgZWxpZiBtc2cucG93ZXJ1cHR5cGUgPT0gJ2ljZV9ib21icyc6CiAgICAgICAgICAgIHNlbGYuYm9tYl90eXBlID0gJ2ljZScKICAgICAgICAgICAgdGV4ID0gc2VsZi5fZ2V0X2JvbWJfdHlwZV90ZXgoKQogICAgICAgICAgICBzZWxmLl9mbGFzaF9iaWxsYm9hcmQodGV4KQogICAgICAgICAgICBpZiBzZWxmLnBvd2VydXBzX2V4cGlyZToKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5taW5pX2JpbGxib2FyZF8yX3RleHR1cmUgPSB0ZXgKICAgICAgICAgICAgICAgIHRfbXMgPSBiYS50aW1lKHRpbWVmb3JtYXQ9YmEuVGltZUZvcm1hdC5NSUxMSVNFQ09ORFMpCiAgICAgICAgICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZSh0X21zLCBpbnQpCiAgICAgICAgICAgICAgICBzZWxmLm5vZGUubWluaV9iaWxsYm9hcmRfMl9zdGFydF90aW1lID0gdF9tcwogICAgICAgICAgICAgICAgc2VsZi5ub2RlLm1pbmlfYmlsbGJvYXJkXzJfZW5kX3RpbWUgPSAoCiAgICAgICAgICAgICAgICAgICAgdF9tcyArIFBPV0VSVVBfV0VBUl9PRkZfVElNRSkKICAgICAgICAgICAgICAgIHNlbGYuX2JvbWJfd2Vhcl9vZmZfZmxhc2hfdGltZXIgPSAoYmEuVGltZXIoCiAgICAgICAgICAgICAgICAgICAgUE9XRVJVUF9XRUFSX09GRl9USU1FIC0gMjAwMCwKICAgICAgICAgICAgICAgICAgICBiYS5XZWFrQ2FsbChzZWxmLl9ib21iX3dlYXJfb2ZmX2ZsYXNoKSwKICAgICAgICAgICAgICAgICAgICB0aW1lZm9ybWF0PWJhLlRpbWVGb3JtYXQuTUlMTElTRUNPTkRTKSkKICAgICAgICAgICAgICAgIHNlbGYuX2JvbWJfd2Vhcl9vZmZfdGltZXIgPSAoYmEuVGltZXIoCiAgICAgICAgICAgICAgICAgICAgUE9XRVJVUF9XRUFSX09GRl9USU1FLAogICAgICAgICAgICAgICAgICAgIGJhLldlYWtDYWxsKHNlbGYuX2JvbWJfd2Vhcl9vZmYpLAogICAgICAgICAgICAgICAgICAgIHRpbWVmb3JtYXQ9YmEuVGltZUZvcm1hdC5NSUxMSVNFQ09ORFMpKQogICAgICAgIGVsaWYgbXNnLnBvd2VydXB0eXBlID09ICdoZWFsdGgnOgogICAgICAgICAgICBpZiBzZWxmLl9jdXJzZWQ6CiAgICAgICAgICAgICAgICBzZWxmLl9jdXJzZWQgPSBGYWxzZQogICAgICAgICAgICAgICAgZmFjdG9yeSA9IFNwYXpGYWN0b3J5LmdldCgpCiAgICAgICAgICAgICAgICBmb3IgYXR0ciBpbiBbJ21hdGVyaWFscycsICdyb2xsZXJfbWF0ZXJpYWxzJ106CiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzID0gZ2V0YXR0cihzZWxmLm5vZGUsIGF0dHIpCiAgICAgICAgICAgICAgICAgICAgaWYgZmFjdG9yeS5jdXJzZV9tYXRlcmlhbCBpbiBtYXRlcmlhbHM6CiAgICAgICAgICAgICAgICAgICAgICAgIHNldGF0dHIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vZGUsIGF0dHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dXBsZShtIGZvciBtIGluIG1hdGVyaWFscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbSAhPSBmYWN0b3J5LmN1cnNlX21hdGVyaWFsKSkKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5jdXJzZV9kZWF0aF90aW1lID0gMAogICAgICAgICAgICBzZWxmLmhpdHBvaW50cyA9IHNlbGYuaGl0cG9pbnRzX21heAogICAgICAgICAgICBzZWxmLl9mbGFzaF9iaWxsYm9hcmQoUG93ZXJ1cEJveEZhY3RvcnkuZ2V0KCkudGV4X2hlYWx0aCkKICAgICAgICAgICAgc2VsZi5ub2RlLmh1cnQgPSAwCiAgICAgICAgICAgIHNlbGYuX2xhc3RfaGl0X3RpbWUgPSBOb25lCiAgICAgICAgICAgIHNlbGYuX251bV90aW1lc19oaXQgPSAwCiAgICAgICAgc2VsZi5ub2RlLmhhbmRsZW1lc3NhZ2UoJ2ZsYXNoJykKICAgICAgICBpZiBtc2cuc291cmNlbm9kZToKICAgICAgICAgICAgbXNnLnNvdXJjZW5vZGUuaGFuZGxlbWVzc2FnZShiYS5Qb3dlcnVwQWNjZXB0TWVzc2FnZSgpKQogICAgICAgIHJldHVybiBUcnVlCiAgICBlbGlmIGlzaW5zdGFuY2UobXNnLCBiYS5GcmVlemVNZXNzYWdlKToKICAgICAgICBpZiBub3Qgc2VsZi5ub2RlOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGlmIHNlbGYubm9kZS5pbnZpbmNpYmxlOgogICAgICAgICAgICBiYS5wbGF5c291bmQoU3BhekZhY3RvcnkuZ2V0KCkuYmxvY2tfc291bmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAxLjAsCiAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbj1zZWxmLm5vZGUucG9zaXRpb24pCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgaWYgc2VsZi5zaGllbGQ6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgaWYgbm90IHNlbGYuZnJvemVuOgogICAgICAgICAgICBzZWxmLmZyb3plbiA9IFRydWUKICAgICAgICAgICAgc2VsZi5ub2RlLmZyb3plbiA9IFRydWUKICAgICAgICAgICAgYmEudGltZXIoNS4wLCBiYS5XZWFrQ2FsbChzZWxmLmhhbmRsZW1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmEuVGhhd01lc3NhZ2UoKSkpCiAgICAgICAgICAgIGlmIHNlbGYuaGl0cG9pbnRzIDw9IDA6CiAgICAgICAgICAgICAgICBzZWxmLnNoYXR0ZXIoKQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgYmEuVGhhd01lc3NhZ2UpOgogICAgICAgIGlmIHNlbGYuZnJvemVuIGFuZCBub3Qgc2VsZi5zaGF0dGVyZWQgYW5kIHNlbGYubm9kZToKICAgICAgICAgICAgc2VsZi5mcm96ZW4gPSBGYWxzZQogICAgICAgICAgICBzZWxmLm5vZGUuZnJvemVuID0gRmFsc2UKICAgIGVsaWYgaXNpbnN0YW5jZShtc2csIHNwYXouQm9tYkRpZWRNZXNzYWdlKToKICAgICAgICBzZWxmLmJvbWJfY291bnQgKz0gMQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgYmEuRGllTWVzc2FnZSk6CiAgICAgICAgd2FzZGVhZCA9IHNlbGYuX2RlYWQKICAgICAgICBzZWxmLl9kZWFkID0gVHJ1ZQogICAgICAgIHNlbGYuaGl0cG9pbnRzID0gMAogICAgICAgIGlmIG1zZy5pbW1lZGlhdGU6CiAgICAgICAgICAgIGlmIHNlbGYubm9kZToKICAgICAgICAgICAgICAgIHNlbGYubm9kZS5kZWxldGUoKQogICAgICAgIGVsaWYgc2VsZi5ub2RlOgogICAgICAgICAgICBzZWxmLm5vZGUuaHVydCA9IDEuMAogICAgICAgICAgICBpZiBzZWxmLnBsYXlfYmlnX2RlYXRoX3NvdW5kIGFuZCBub3Qgd2FzZGVhZDoKICAgICAgICAgICAgICAgIGJhLnBsYXlzb3VuZChTcGF6RmFjdG9yeS5nZXQoKS5zaW5nbGVfcGxheWVyX2RlYXRoX3NvdW5kKQogICAgICAgICAgICBzZWxmLm5vZGUuZGVhZCA9IFRydWUKICAgICAgICAgICAgYmEudGltZXIoMi4wLCBzZWxmLm5vZGUuZGVsZXRlKQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgYmEuT3V0T2ZCb3VuZHNNZXNzYWdlKToKICAgICAgICBzZWxmLmhhbmRsZW1lc3NhZ2UoYmEuRGllTWVzc2FnZShob3c9YmEuRGVhdGhUeXBlLkZBTEwpKQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgYmEuU3RhbmRNZXNzYWdlKToKICAgICAgICBzZWxmLl9sYXN0X3N0YW5kX3BvcyA9IChtc2cucG9zaXRpb25bMF0sIG1zZy5wb3NpdGlvblsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cucG9zaXRpb25bMl0pCiAgICAgICAgaWYgc2VsZi5ub2RlOgogICAgICAgICAgICBzZWxmLm5vZGUuaGFuZGxlbWVzc2FnZSgnc3RhbmQnLCBtc2cucG9zaXRpb25bMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5wb3NpdGlvblsxXSwgbXNnLnBvc2l0aW9uWzJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuYW5nbGUpCiAgICBlbGlmIGlzaW5zdGFuY2UobXNnLCBDdXJzZUV4cGxvZGVNZXNzYWdlKToKICAgICAgICBzZWxmLmN1cnNlX2V4cGxvZGUoKQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgUHVuY2hIaXRNZXNzYWdlKToKICAgICAgICBpZiBub3Qgc2VsZi5ub2RlOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIG5vZGUgPSBiYS5nZXRjb2xsaXNpb24oKS5vcHBvc2luZ25vZGUKICAgICAgICBpZiBub2RlIGFuZCAobm9kZSBub3QgaW4gc2VsZi5fcHVuY2hlZF9ub2Rlcyk6CiAgICAgICAgICAgIHB1bmNoX21vbWVudHVtX2FuZ3VsYXIgPSAoc2VsZi5ub2RlLnB1bmNoX21vbWVudHVtX2FuZ3VsYXIgKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3B1bmNoX3Bvd2VyX3NjYWxlKQogICAgICAgICAgICBwdW5jaF9wb3dlciA9IHNlbGYubm9kZS5wdW5jaF9wb3dlciAqIHNlbGYuX3B1bmNoX3Bvd2VyX3NjYWxlCiAgICAgICAgICAgIGlmIG5vZGUuZ2V0bm9kZXR5cGUoKSAhPSAnc3Bheic6CiAgICAgICAgICAgICAgICBzb3VuZHMgPSBTcGF6RmFjdG9yeS5nZXQoKS5pbXBhY3Rfc291bmRzX21lZGl1bQogICAgICAgICAgICAgICAgc291bmQgPSBzb3VuZHNbcmFuZG9tLnJhbmRyYW5nZShsZW4oc291bmRzKSldCiAgICAgICAgICAgICAgICBiYS5wbGF5c291bmQoc291bmQsIDEuMCwgcG9zaXRpb249c2VsZi5ub2RlLnBvc2l0aW9uKQogICAgICAgICAgICBwcG9zID0gc2VsZi5ub2RlLnB1bmNoX3Bvc2l0aW9uCiAgICAgICAgICAgIHB1bmNoZGlyID0gc2VsZi5ub2RlLnB1bmNoX3ZlbG9jaXR5CiAgICAgICAgICAgIHZlbCA9IHNlbGYubm9kZS5wdW5jaF9tb21lbnR1bV9saW5lYXIKICAgICAgICAgICAgc2VsZi5fcHVuY2hlZF9ub2Rlcy5hZGQobm9kZSkKICAgICAgICAgICAgbm9kZS5oYW5kbGVtZXNzYWdlKAogICAgICAgICAgICAgICAgYmEuSGl0TWVzc2FnZSgKICAgICAgICAgICAgICAgICAgICBwb3M9cHBvcywKICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eT12ZWwsCiAgICAgICAgICAgICAgICAgICAgbWFnbml0dWRlPXB1bmNoX3Bvd2VyICogcHVuY2hfbW9tZW50dW1fYW5ndWxhciAqIDYwLAogICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5X21hZ25pdHVkZT1wdW5jaF9wb3dlciAqIDQwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1cz0wLAogICAgICAgICAgICAgICAgICAgIHNyY25vZGU9c2VsZi5ub2RlLAogICAgICAgICAgICAgICAgICAgIHNvdXJjZV9wbGF5ZXI9c2VsZi5zb3VyY2VfcGxheWVyLAogICAgICAgICAgICAgICAgICAgIGZvcmNlX2RpcmVjdGlvbj1wdW5jaGRpciwKICAgICAgICAgICAgICAgICAgICBoaXRfdHlwZT0ncHVuY2gnLAogICAgICAgICAgICAgICAgICAgIGhpdF9zdWJ0eXBlPSgnc3VwZXJfcHVuY2gnIGlmIHNlbGYuX2hhc19ib3hpbmdfZ2xvdmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgJ2RlZmF1bHQnKSkpCiAgICAgICAgICAgIG1hZyA9IC00MDAuMAogICAgICAgICAgICBpZiBzZWxmLl9ob2NrZXk6CiAgICAgICAgICAgICAgICBtYWcgKj0gMC41CiAgICAgICAgICAgIGlmIGxlbihzZWxmLl9wdW5jaGVkX25vZGVzKSA9PSAxOgogICAgICAgICAgICAgICAgc2VsZi5ub2RlLmhhbmRsZW1lc3NhZ2UoJ2tpY2tfYmFjaycsIHBwb3NbMF0sIHBwb3NbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcG9zWzJdLCBwdW5jaGRpclswXSwgcHVuY2hkaXJbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdW5jaGRpclsyXSwgbWFnKQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgUGlja3VwTWVzc2FnZSk6CiAgICAgICAgaWYgbm90IHNlbGYubm9kZToKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICB0cnk6CiAgICAgICAgICAgIGNvbGxpc2lvbiA9IGJhLmdldGNvbGxpc2lvbigpCiAgICAgICAgICAgIG9wcG9zaW5nbm9kZSA9IGNvbGxpc2lvbi5vcHBvc2luZ25vZGUKICAgICAgICAgICAgb3Bwb3Npbmdib2R5ID0gY29sbGlzaW9uLm9wcG9zaW5nYm9keQogICAgICAgIGV4Y2VwdCBiYS5Ob3RGb3VuZEVycm9yOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgb3Bwb3Npbmdub2RlLmludmluY2libGU6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHBhc3MKICAgICAgICBpZiAob3Bwb3Npbmdub2RlLmdldG5vZGV0eXBlKCkgPT0gJ3NwYXonCiAgICAgICAgICAgICAgICBhbmQgbm90IG9wcG9zaW5nbm9kZS5zaGF0dGVyZWQgYW5kIG9wcG9zaW5nYm9keSA9PSA0KToKICAgICAgICAgICAgb3Bwb3Npbmdib2R5ID0gMQogICAgICAgIGhlbGQgPSBzZWxmLm5vZGUuaG9sZF9ub2RlCiAgICAgICAgaWYgaGVsZCBhbmQgaGVsZC5nZXRub2RldHlwZSgpID09ICdmbGFnJzoKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBzZWxmLm5vZGUuaG9sZF9ib2R5ID0gb3Bwb3Npbmdib2R5CiAgICAgICAgc2VsZi5ub2RlLmhvbGRfbm9kZSA9IG9wcG9zaW5nbm9kZQogICAgZWxpZiBpc2luc3RhbmNlKG1zZywgYmEuQ2VsZWJyYXRlTWVzc2FnZSk6CiAgICAgICAgaWYgc2VsZi5ub2RlOgogICAgICAgICAgICBzZWxmLm5vZGUuaGFuZGxlbWVzc2FnZSgnY2VsZWJyYXRlJywgaW50KG1zZy5kdXJhdGlvbiAqIDEwMDApKQogICAgZWxzZToKICAgICAgICByZXR1cm4gU3Bhei5oYW5kbGVtZXNzYWdlCiAgICByZXR1cm4gTm9uZQ==").decode('utf-8'))

# ba_meta require api 6
# ba_meta export plugin
class desu(ba.Plugin):
    def __init__(self):
      spaz.Spaz.handlemessage = handlemessage

# ba_meta export plugin
class show_punch_damage_text(ba.Plugin):
    def __init__(self):
      spaz.Spaz.disabled = True